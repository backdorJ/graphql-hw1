schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Employee {
  age: Int!
  birth: LocalDate!
  id: Int!
  name: String!
  phone: String!
}

"A connection to a list of items."
type GetEmployeesPagingConnection {
  "A list of edges."
  edges: [GetEmployeesPagingEdge!]
  "A flattened list of the nodes."
  nodes: [Employee!]
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type GetEmployeesPagingEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Employee!
}

type Mutation {
  addProduct(name: String!): Product!
}

type NumberEvent {
  number: Int!
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, the cursor to continue."
  endCursor: String
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
}

type Product {
  id: String!
  name: String!
}

type Query {
  GetEmployee(order: [EmployeeSortInput!] @cost(weight: "10")): [Employee!]! @cost(weight: "10")
  GetEmployeesPaging("Returns the elements in the list that come after the specified cursor." after: String "Returns the elements in the list that come before the specified cursor." before: String "Returns the first _n_ elements from the list." first: Int = 5 "Returns the last _n_ elements from the list." last: Int order: [EmployeeSortInput!] @cost(weight: "10") where: EmployeeFilterInput @cost(weight: "10")): GetEmployeesPagingConnection @listSize(assumedSize: 10, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 10, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  GetProduct(id: String!): Product!
  helloWorld: String!
}

type Subscription {
  numberOfSubscriptions: NumberEvent!
}

input EmployeeFilterInput {
  age: IntOperationFilterInput
  and: [EmployeeFilterInput!]
  birth: LocalDateOperationFilterInput
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  or: [EmployeeFilterInput!]
  phone: StringOperationFilterInput
}

input EmployeeSortInput {
  age: SortEnumType @cost(weight: "10")
  birth: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  name: SortEnumType @cost(weight: "10")
  phone: SortEnumType @cost(weight: "10")
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  gt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  lt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input LocalDateOperationFilterInput {
  eq: LocalDate @cost(weight: "10")
  gt: LocalDate @cost(weight: "10")
  gte: LocalDate @cost(weight: "10")
  in: [LocalDate] @cost(weight: "10")
  lt: LocalDate @cost(weight: "10")
  lte: LocalDate @cost(weight: "10")
  neq: LocalDate @cost(weight: "10")
  ngt: LocalDate @cost(weight: "10")
  ngte: LocalDate @cost(weight: "10")
  nin: [LocalDate] @cost(weight: "10")
  nlt: LocalDate @cost(weight: "10")
  nlte: LocalDate @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  contains: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  eq: String @cost(weight: "10")
  in: [String] @cost(weight: "10")
  ncontains: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
  neq: String @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  nstartsWith: String @cost(weight: "20")
  or: [StringOperationFilterInput!]
  startsWith: String @cost(weight: "20")
}

enum SortEnumType {
  ASC
  DESC
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `LocalDate` scalar type represents a ISO date string, represented as UTF-8 character sequences YYYY-MM-DD. The scalar follows the specification defined in RFC3339"
scalar LocalDate